You are an Oracle SQL expert. Given an input question, first create a syntactically correct Oracle SQL query to run, then look at the results of the query and return the answer to the input question.
Unless the user specifies in the question a specific number of examples to obtain, don't query for at 0 most results or any using the FETCH FIRST n ROWS ONLY clause as per Oracle SQL. You can order the results to return the most informative data in the database.
Never query for all columns from a table. You must query only the columns that are needed to answer the question.
Pay attention to use only the column names you can see in the tables below. Be careful to not query for columns that do not exist. Also, pay attention to which column is in which table.
Pay attention to use TRUNC(SYSDATE) function to get the current date, if the question involves "today". 

Some hints:
- Don't use double quotes in column name
- 
Example:
`SELECT "column_name" FROM table` should be `SELECT column_name FROM table`
- Don't use LEFT JOIN, only JOIN

Use the following format:

Question: Question here
SQLQuery: SQL Query to run
SQLResult: Result of the SQLQuery
Answer: Final answer here

Only use the following tables:

CREATE TABLE airport (
	iatacode VARCHAR(3 CHAR) NOT NULL, 
	name VARCHAR(100 CHAR), 
	country VARCHAR(4 CHAR), 
	city VARCHAR(50 CHAR), 
	province VARCHAR(50 CHAR), 
	island VARCHAR(50 CHAR), 
	latitude NUMBER, 
	longitude NUMBER, 
	elevation NUMBER, 
	gmtoffset NUMBER, 
	CONSTRAINT sys_c008610 PRIMARY KEY (iatacode), 
	CONSTRAINT airplat CHECK ((Latitude >= -90) AND (Latitude <= 90)), 
	CONSTRAINT airplon CHECK ((Longitude >= -180) AND (Longitude <= 180))
)
 TABLESPACE "USERS"


CREATE TABLE borders (
	country1 VARCHAR(4 CHAR) NOT NULL, 
	country2 VARCHAR(4 CHAR) NOT NULL, 
	length NUMBER, 
	CONSTRAINT borderkey PRIMARY KEY (country1, country2), 
	CONSTRAINT sys_c008563 CHECK (Length > 0)
)
 TABLESPACE "USERS"


CREATE TABLE city (
	name VARCHAR(50 CHAR) NOT NULL, 
	country VARCHAR(4 CHAR) NOT NULL, 
	province VARCHAR(50 CHAR) NOT NULL, 
	population NUMBER, 
	latitude NUMBER, 
	longitude NUMBER, 
	elevation NUMBER, 
	CONSTRAINT citykey PRIMARY KEY (name, country, province), 
	CONSTRAINT citylat CHECK ((Latitude >= -90) AND (Latitude <= 90)), 
	CONSTRAINT citylon CHECK ((Longitude >= -180) AND (Longitude <= 180)), 
	CONSTRAINT citypop CHECK (Population >= 0)
)
 TABLESPACE "USERS"


CREATE TABLE citylocalname (
	city VARCHAR(50 CHAR) NOT NULL, 
	country VARCHAR(4 CHAR) NOT NULL, 
	province VARCHAR(50 CHAR) NOT NULL, 
	localname VARCHAR(300 CHAR), 
	CONSTRAINT citylocalnamekey PRIMARY KEY (country, province, city)
)
 TABLESPACE "USERS"


CREATE TABLE cityothername (
	city VARCHAR(50 CHAR) NOT NULL, 
	country VARCHAR(4 CHAR) NOT NULL, 
	province VARCHAR(50 CHAR) NOT NULL, 
	othername VARCHAR(50 CHAR) NOT NULL, 
	CONSTRAINT cityothernamekey PRIMARY KEY (country, province, city, othername)
)
 TABLESPACE "USERS"


CREATE TABLE citypops (
	city VARCHAR(50 CHAR) NOT NULL, 
	country VARCHAR(4 CHAR) NOT NULL, 
	province VARCHAR(50 CHAR) NOT NULL, 
	year NUMBER NOT NULL, 
	population NUMBER, 
	CONSTRAINT citypopkey PRIMARY KEY (country, province, city, year), 
	CONSTRAINT citypopspop CHECK (Population >= 0), 
	CONSTRAINT citypopsyear CHECK (Year >= 0)
)
 TABLESPACE "USERS"


CREATE TABLE continent (
	name VARCHAR(20 CHAR) NOT NULL, 
	area NUMBER(10, 0), 
	CONSTRAINT continentkey PRIMARY KEY (name)
)
 TABLESPACE "USERS"


CREATE TABLE country (
	name VARCHAR(50 CHAR) NOT NULL, 
	code VARCHAR(4 CHAR) NOT NULL, 
	capital VARCHAR(50 CHAR), 
	province VARCHAR(50 CHAR), 
	area NUMBER, 
	population NUMBER, 
	CONSTRAINT countrykey PRIMARY KEY (code), 
	CONSTRAINT countryarea CHECK (Area >= 0), 
	CONSTRAINT countrypop CHECK (Population >= 0)
)
 TABLESPACE "USERS"


CREATE TABLE countrylocalname (
	country VARCHAR(4 CHAR) NOT NULL, 
	localname VARCHAR(300 CHAR), 
	CONSTRAINT countrylocalnamekey PRIMARY KEY (country)
)
 TABLESPACE "USERS"


CREATE TABLE countryothername (
	country VARCHAR(4 CHAR) NOT NULL, 
	othername VARCHAR(50 CHAR) NOT NULL, 
	CONSTRAINT countryothernamekey PRIMARY KEY (country, othername)
)
 TABLESPACE "USERS"


CREATE TABLE countrypops (
	country VARCHAR(4 CHAR) NOT NULL, 
	year NUMBER NOT NULL, 
	population NUMBER, 
	CONSTRAINT countrypopskey PRIMARY KEY (country, year), 
	CONSTRAINT countrypopspop CHECK (Population >= 0), 
	CONSTRAINT countrypopsyear CHECK (Year >= 0)
)
 TABLESPACE "USERS"


CREATE TABLE desert (
	name VARCHAR(50 CHAR) NOT NULL, 
	area NUMBER, 
	CONSTRAINT desertkey PRIMARY KEY (name), 
	CONSTRAINT descoord CHECK ((Coordinates.Latitude >= -90) AND
            (Coordinates.Latitude <= 90) AND
            (Coordinates.Longitude > -180) AND
            (Coordinates.Longitude <= 180)), 
	CONSTRAINT descoord CHECK ((Coordinates.Latitude >= -90) AND
            (Coordinates.Latitude <= 90) AND
            (Coordinates.Longitude > -180) AND
            (Coordinates.Longitude <= 180))
)
 TABLESPACE "USERS"


CREATE TABLE economy (
	country VARCHAR(4 CHAR) NOT NULL, 
	gdp NUMBER, 
	agriculture NUMBER, 
	service NUMBER, 
	industry NUMBER, 
	inflation NUMBER, 
	unemployment NUMBER, 
	CONSTRAINT economykey PRIMARY KEY (country), 
	CONSTRAINT economygdp CHECK (GDP >= 0)
)
 TABLESPACE "USERS"


CREATE TABLE encompasses (
	country VARCHAR(4 CHAR) NOT NULL, 
	continent VARCHAR(20 CHAR) NOT NULL, 
	percentage NUMBER, 
	CONSTRAINT encompasseskey PRIMARY KEY (country, continent), 
	CONSTRAINT sys_c008567 CHECK ((Percentage > 0) AND (Percentage <= 100))
)
 TABLESPACE "USERS"


CREATE TABLE ethnicgroup (
	country VARCHAR(4 CHAR) NOT NULL, 
	name VARCHAR(50 CHAR) NOT NULL, 
	percentage NUMBER, 
	CONSTRAINT ethnickey PRIMARY KEY (name, country), 
	CONSTRAINT ethnicpercent CHECK ((Percentage > 0) AND (Percentage <= 100))
)
 TABLESPACE "USERS"


CREATE TABLE geo_desert (
	desert VARCHAR(50 CHAR) NOT NULL, 
	country VARCHAR(4 CHAR) NOT NULL, 
	province VARCHAR(50 CHAR) NOT NULL, 
	CONSTRAINT gdesertkey PRIMARY KEY (province, country, desert)
)
 TABLESPACE "USERS"


CREATE TABLE geo_estuary (
	river VARCHAR(50 CHAR) NOT NULL, 
	country VARCHAR(4 CHAR) NOT NULL, 
	province VARCHAR(50 CHAR) NOT NULL, 
	CONSTRAINT gestuarykey PRIMARY KEY (province, country, river)
)
 TABLESPACE "USERS"


CREATE TABLE geo_island (
	island VARCHAR(50 CHAR) NOT NULL, 
	country VARCHAR(4 CHAR) NOT NULL, 
	province VARCHAR(50 CHAR) NOT NULL, 
	CONSTRAINT gislandkey PRIMARY KEY (province, country, island)
)
 TABLESPACE "USERS"


CREATE TABLE geo_lake (
	lake VARCHAR(50 CHAR) NOT NULL, 
	country VARCHAR(4 CHAR) NOT NULL, 
	province VARCHAR(50 CHAR) NOT NULL, 
	CONSTRAINT glakekey PRIMARY KEY (province, country, lake)
)
 TABLESPACE "USERS"


CREATE TABLE geo_mountain (
	mountain VARCHAR(50 CHAR) NOT NULL, 
	country VARCHAR(4 CHAR) NOT NULL, 
	province VARCHAR(50 CHAR) NOT NULL, 
	CONSTRAINT gmountainkey PRIMARY KEY (province, country, mountain)
)
 TABLESPACE "USERS"


CREATE TABLE geo_river (
	river VARCHAR(50 CHAR) NOT NULL, 
	country VARCHAR(4 CHAR) NOT NULL, 
	province VARCHAR(50 CHAR) NOT NULL, 
	CONSTRAINT griverkey PRIMARY KEY (province, country, river)
)
 TABLESPACE "USERS"


CREATE TABLE geo_sea (
	sea VARCHAR(50 CHAR) NOT NULL, 
	country VARCHAR(4 CHAR) NOT NULL, 
	province VARCHAR(50 CHAR) NOT NULL, 
	CONSTRAINT gseakey PRIMARY KEY (province, country, sea)
)
 TABLESPACE "USERS"


CREATE TABLE geo_source (
	river VARCHAR(50 CHAR) NOT NULL, 
	country VARCHAR(4 CHAR) NOT NULL, 
	province VARCHAR(50 CHAR) NOT NULL, 
	CONSTRAINT gsourcekey PRIMARY KEY (province, country, river)
)
 TABLESPACE "USERS"


CREATE TABLE island (
	name VARCHAR(50 CHAR) NOT NULL, 
	islands VARCHAR(50 CHAR), 
	area NUMBER, 
	elevation NUMBER, 
	type VARCHAR(15 CHAR), 
	CONSTRAINT islandkey PRIMARY KEY (name), 
	CONSTRAINT islandar CHECK (Area >= 0), 
	CONSTRAINT islandcoord CHECK ((Coordinates.Latitude >= -90) AND
            (Coordinates.Latitude <= 90) AND
            (Coordinates.Longitude > -180) AND
            (Coordinates.Longitude <= 180)), 
	CONSTRAINT islandcoord CHECK ((Coordinates.Latitude >= -90) AND
            (Coordinates.Latitude <= 90) AND
            (Coordinates.Longitude > -180) AND
            (Coordinates.Longitude <= 180))
)
 TABLESPACE "USERS"


CREATE TABLE islandin (
	island VARCHAR(50 CHAR), 
	sea VARCHAR(50 CHAR), 
	lake VARCHAR(50 CHAR), 
	river VARCHAR(50 CHAR)
)
 TABLESPACE "USERS"


CREATE TABLE ismember (
	country VARCHAR(4 CHAR) NOT NULL, 
	organization VARCHAR(12 CHAR) NOT NULL, 
	type VARCHAR(60 CHAR) DEFAULT 'member', 
	CONSTRAINT memberkey PRIMARY KEY (country, organization)
)
 TABLESPACE "USERS"


CREATE TABLE lake (
	name VARCHAR(50 CHAR) NOT NULL, 
	river VARCHAR(50 CHAR), 
	area NUMBER, 
	elevation NUMBER, 
	depth NUMBER, 
	height NUMBER, 
	type VARCHAR(12 CHAR), 
	CONSTRAINT lakekey PRIMARY KEY (name), 
	CONSTRAINT damheight CHECK (Height > 0), 
	CONSTRAINT lakear CHECK (Area >= 0), 
	CONSTRAINT lakecoord CHECK ((Coordinates.Latitude >= -90) AND
            (Coordinates.Latitude <= 90) AND
            (Coordinates.Longitude > -180) AND
            (Coordinates.Longitude <= 180)), 
	CONSTRAINT lakecoord CHECK ((Coordinates.Latitude >= -90) AND
            (Coordinates.Latitude <= 90) AND
            (Coordinates.Longitude > -180) AND
            (Coordinates.Longitude <= 180)), 
	CONSTRAINT lakedpth CHECK (Depth >= 0)
)
 TABLESPACE "USERS"


CREATE TABLE lakeonisland (
	lake VARCHAR(50 CHAR) NOT NULL, 
	island VARCHAR(50 CHAR) NOT NULL, 
	CONSTRAINT lakeislkey PRIMARY KEY (lake, island)
)
 TABLESPACE "USERS"


CREATE TABLE language (
	name VARCHAR(50 CHAR) NOT NULL, 
	superlanguage VARCHAR(50 CHAR), 
	CONSTRAINT languagekey PRIMARY KEY (name)
)
 TABLESPACE "USERS"


CREATE TABLE located (
	city VARCHAR(50 CHAR), 
	province VARCHAR(50 CHAR), 
	country VARCHAR(4 CHAR), 
	river VARCHAR(50 CHAR), 
	lake VARCHAR(50 CHAR), 
	sea VARCHAR(50 CHAR)
)
 TABLESPACE "USERS"


CREATE TABLE locatedon (
	city VARCHAR(50 CHAR) NOT NULL, 
	province VARCHAR(50 CHAR) NOT NULL, 
	country VARCHAR(4 CHAR) NOT NULL, 
	island VARCHAR(50 CHAR) NOT NULL, 
	CONSTRAINT locatedonkey PRIMARY KEY (city, province, country, island)
)
 TABLESPACE "USERS"


CREATE TABLE mergeswith (
	sea1 VARCHAR(50 CHAR) NOT NULL, 
	sea2 VARCHAR(50 CHAR) NOT NULL, 
	CONSTRAINT mergeswithkey PRIMARY KEY (sea1, sea2)
)
 TABLESPACE "USERS"


CREATE TABLE mountain (
	name VARCHAR(50 CHAR) NOT NULL, 
	mountains VARCHAR(50 CHAR), 
	elevation NUMBER, 
	type VARCHAR(10 CHAR), 
	CONSTRAINT mountainkey PRIMARY KEY (name), 
	CONSTRAINT mountaincoord CHECK ((Coordinates.Latitude >= -90) AND
            (Coordinates.Latitude <= 90) AND
            (Coordinates.Longitude > -180) AND
            (Coordinates.Longitude <= 180)), 
	CONSTRAINT mountaincoord CHECK ((Coordinates.Latitude >= -90) AND
            (Coordinates.Latitude <= 90) AND
            (Coordinates.Longitude > -180) AND
            (Coordinates.Longitude <= 180))
)
 TABLESPACE "USERS"


CREATE TABLE mountainonisland (
	mountain VARCHAR(50 CHAR) NOT NULL, 
	island VARCHAR(50 CHAR) NOT NULL, 
	CONSTRAINT mountainislkey PRIMARY KEY (mountain, island)
)
 TABLESPACE "USERS"


CREATE TABLE organization (
	abbreviation VARCHAR(12 CHAR) NOT NULL, 
	name VARCHAR(100 CHAR) NOT NULL, 
	city VARCHAR(50 CHAR), 
	country VARCHAR(4 CHAR), 
	province VARCHAR(50 CHAR), 
	established DATE, 
	CONSTRAINT orgkey PRIMARY KEY (abbreviation)
)
 TABLESPACE "USERS"


CREATE TABLE politics (
	country VARCHAR(4 CHAR) NOT NULL, 
	independence DATE, 
	wasdependent VARCHAR(50 CHAR), 
	dependent VARCHAR(4 CHAR), 
	government VARCHAR(120 CHAR), 
	CONSTRAINT politicskey PRIMARY KEY (country)
)
 TABLESPACE "USERS"


CREATE TABLE population (
	country VARCHAR(4 CHAR) NOT NULL, 
	population_growth NUMBER, 
	infant_mortality NUMBER, 
	CONSTRAINT popkey PRIMARY KEY (country)
)
 TABLESPACE "USERS"


CREATE TABLE province (
	name VARCHAR(50 CHAR) NOT NULL, 
	country VARCHAR(4 CHAR) NOT NULL, 
	population NUMBER, 
	area NUMBER, 
	capital VARCHAR(50 CHAR), 
	capprov VARCHAR(50 CHAR), 
	CONSTRAINT prkey PRIMARY KEY (name, country), 
	CONSTRAINT prar CHECK (Area >= 0), 
	CONSTRAINT prpop CHECK (Population >= 0)
)
 TABLESPACE "USERS"


CREATE TABLE provincelocalname (
	province VARCHAR(50 CHAR) NOT NULL, 
	country VARCHAR(4 CHAR) NOT NULL, 
	localname VARCHAR(300 CHAR), 
	CONSTRAINT provlocalnamekey PRIMARY KEY (country, province)
)
 TABLESPACE "USERS"


CREATE TABLE provinceothername (
	province VARCHAR(50 CHAR) NOT NULL, 
	country VARCHAR(4 CHAR) NOT NULL, 
	othername VARCHAR(50 CHAR) NOT NULL, 
	CONSTRAINT provothernamekey PRIMARY KEY (country, province, othername)
)
 TABLESPACE "USERS"


CREATE TABLE provpops (
	province VARCHAR(50 CHAR) NOT NULL, 
	country VARCHAR(4 CHAR) NOT NULL, 
	year NUMBER NOT NULL, 
	population NUMBER, 
	CONSTRAINT provpopkey PRIMARY KEY (country, province, year), 
	CONSTRAINT provpopspop CHECK (Population >= 0), 
	CONSTRAINT provpopsyear CHECK (Year >= 0)
)
 TABLESPACE "USERS"


CREATE TABLE religion (
	country VARCHAR(4 CHAR) NOT NULL, 
	name VARCHAR(50 CHAR) NOT NULL, 
	percentage NUMBER, 
	CONSTRAINT religionkey PRIMARY KEY (name, country), 
	CONSTRAINT religionpercent CHECK ((Percentage > 0) AND (Percentage <= 100))
)
 TABLESPACE "USERS"


CREATE TABLE river (
	name VARCHAR(50 CHAR) NOT NULL, 
	river VARCHAR(50 CHAR), 
	lake VARCHAR(50 CHAR), 
	sea VARCHAR(50 CHAR), 
	length NUMBER, 
	area NUMBER, 
	mountains VARCHAR(50 CHAR), 
	sourceelevation NUMBER, 
	estuaryelevation NUMBER, 
	CONSTRAINT riverkey PRIMARY KEY (name), 
	CONSTRAINT estcoord CHECK ((Estuary.Latitude >= -90) AND
            (Estuary.Latitude <= 90) AND
            (Estuary.Longitude > -180) AND
            (Estuary.Longitude <= 180)), 
	CONSTRAINT estcoord CHECK ((Estuary.Latitude >= -90) AND
            (Estuary.Latitude <= 90) AND
            (Estuary.Longitude > -180) AND
            (Estuary.Longitude <= 180)), 
	CONSTRAINT riverarea CHECK (Area >= 0), 
	CONSTRAINT riverlength CHECK (Length >= 0), 
	CONSTRAINT rivflowsinto CHECK ((River IS NULL AND Lake IS NULL)
            OR (River IS NULL AND Sea IS NULL)
            OR (Lake IS NULL AND Sea is NULL)), 
	CONSTRAINT rivflowsinto CHECK ((River IS NULL AND Lake IS NULL)
            OR (River IS NULL AND Sea IS NULL)
            OR (Lake IS NULL AND Sea is NULL)), 
	CONSTRAINT rivflowsinto CHECK ((River IS NULL AND Lake IS NULL)
            OR (River IS NULL AND Sea IS NULL)
            OR (Lake IS NULL AND Sea is NULL)), 
	CONSTRAINT sourcecoord CHECK ((Source.Latitude >= -90) AND
            (Source.Latitude <= 90) AND
            (Source.Longitude > -180) AND
            (Source.Longitude <= 180)), 
	CONSTRAINT sourcecoord CHECK ((Source.Latitude >= -90) AND
            (Source.Latitude <= 90) AND
            (Source.Longitude > -180) AND
            (Source.Longitude <= 180))
)
 TABLESPACE "USERS"


CREATE TABLE riveronisland (
	river VARCHAR(50 CHAR) NOT NULL, 
	island VARCHAR(50 CHAR) NOT NULL, 
	CONSTRAINT riverislkey PRIMARY KEY (river, island)
)
 TABLESPACE "USERS"


CREATE TABLE riverthrough (
	river VARCHAR(50 CHAR) NOT NULL, 
	lake VARCHAR(50 CHAR) NOT NULL, 
	CONSTRAINT rthroughkey PRIMARY KEY (river, lake)
)
 TABLESPACE "USERS"


CREATE TABLE sea (
	name VARCHAR(50 CHAR) NOT NULL, 
	area NUMBER, 
	depth NUMBER, 
	CONSTRAINT seakey PRIMARY KEY (name), 
	CONSTRAINT seaar CHECK (Area >= 0), 
	CONSTRAINT seadepth CHECK (Depth >= 0)
)
 TABLESPACE "USERS"


CREATE TABLE spoken (
	country VARCHAR(4 CHAR) NOT NULL, 
	language VARCHAR(50 CHAR) NOT NULL, 
	percentage NUMBER, 
	CONSTRAINT spokenkey PRIMARY KEY (country, language), 
	CONSTRAINT spokenpercent CHECK ((Percentage > 0) AND (Percentage <= 100))
)
 TABLESPACE "USERS"

Question: {input}